class Solution {
    void combinationSumUtil(vector<int> &candidates, int target, int l, vector<int> &v,
                                                vector<vector<int>> &ans) {
        if (target == 0) {
            ans.push_back(v);
            return;
        }
        
        for (int i = l; i < candidates.size(); ++i) {
            if (candidates[i] > target)
                return;
            
            v.push_back(candidates[i]);
            combinationSumUtil(candidates, target-candidates[i], i+1, v, ans);
            v.pop_back();
            while ((i+1 < candidates.size()) && (candidates[i] == candidates[i+1]))
                i++;
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>v;
        
        sort(candidates.begin(), candidates.end());
        combinationSumUtil(candidates, target, 0, v, ans);
        return ans;
    }
};
